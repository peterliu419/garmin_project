version: '3.8'

services:
  redis-node1:
    image: redis:6.2-alpine
    container_name: redis-node1
    hostname: redis-node1
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file /data/node1.conf 
      --cluster-node-timeout 5000 
      --bind 0.0.0.0
    volumes:
      - redis-node1-data:/data
    networks:
      redis-cluster-net:
        aliases:
          - redis-node1
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis-node1", "cluster", "info", "|", "grep", "'cluster_state:ok'"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-node2:
    image: redis:6.2-alpine
    container_name: redis-node2
    hostname: redis-node2
    ports:
      - "6380:6379"
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file /data/node2.conf 
      --cluster-node-timeout 5000 
      --bind 0.0.0.0
    volumes:
      - redis-node2-data:/data
    networks:
      redis-cluster-net:
        aliases:
          - redis-node2
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis-node2", "cluster", "info", "|", "grep", "'cluster_state:ok'"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-node3:
    image: redis:6.2-alpine
    container_name: redis-node3
    hostname: redis-node3
    ports:
      - "6381:6379"
    command: >
      redis-server 
      --port 6379 
      --cluster-enabled yes 
      --cluster-config-file /data/node3.conf 
      --cluster-node-timeout 5000 
      --bind 0.0.0.0
    volumes:
      - redis-node3-data:/data
    networks:
      redis-cluster-net:
        aliases:
          - redis-node3
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis-node3", "cluster", "info", "|", "grep", "'cluster_state:ok'"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cluster-init:
    image: redis:6.2-alpine
    container_name: redis-cluster-init
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
    networks:
      - redis-cluster-net
    volumes:
      - ./init-cluster.sh:/init-cluster.sh
    command: sh /init-cluster.sh

  producer-app:
    image: ghcr.io/peterliu419/garmin_project/producer-app:latest
    container_name: producer-app
    ports:
      - "5001:5001"
    depends_on:
      redis-node1:
        condition: service_healthy
      redis-node2:
        condition: service_healthy
      redis-node3:
        condition: service_healthy
    networks:
      - redis-cluster-net
    environment:
      - REDIS_HOSTS=redis-node1:6379,redis-node2:6379,redis-node3:6379
      - FLASK_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  producer-client:
    image: ghcr.io/peterliu419/garmin_project/producer-client:latest
    container_name: producer-client
    depends_on:
      producer-app:
        condition: service_healthy
    networks:
      - redis-cluster-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  consumer-app:
    image: ghcr.io/peterliu419/garmin_project/consumer-app:latest
    container_name: consumer-app
    ports:
      - "5002:5002"
    depends_on:
      redis-node1:
        condition: service_healthy
      redis-node2:
        condition: service_healthy
      redis-node3:
        condition: service_healthy
      producer-app:
        condition: service_healthy
    networks:
      - redis-cluster-net
    environment:
      - REDIS_HOSTS=redis-node1:6379,redis-node2:6379,redis-node3:6379
      - FLASK_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  consumer-client:
    image: ghcr.io/peterliu419/garmin_project/consumer-client:latest    
    container_name: consumer-client
    depends_on:
      consumer-app:
        condition: service_healthy
    networks:
      - redis-cluster-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Prometheus web interface
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Mount configuration file
    networks:
      - redis-cluster-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana web interface
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default admin password
    depends_on:
      - prometheus
    networks:
      - redis-cluster-net

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    environment:
      - REDIS_ADDR=redis-node1:6379  # Monitor Redis instance
    ports:
      - "9121:9121"  # Redis Exporter metrics port
    depends_on:
      - redis-cluster-init
    networks:
      - redis-cluster-net

networks:
  redis-cluster-net:
    driver: bridge

volumes:
  redis-node1-data:
  redis-node2-data:
  redis-node3-data: