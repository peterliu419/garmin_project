version: '3'

services:
  # Redis Cluster Setup (3 Nodes)
  redis-node1:
    image: redis:6.0
    container_name: redis-node1
    ports:
      - "6379:6379"  # Map host port 6379 to container port 6379
    command:
      - redis-server
      - "--cluster-enabled"
      - "yes"
      - "--cluster-config-file"
      - "/data/nodes.conf"
      - "--cluster-node-timeout"
      - "5000"
    volumes:
      - redis-data:/data  # Persist Redis data
    networks:
      - app-network

  redis-node2:
    image: redis:6.0
    container_name: redis-node2
    ports:
      - "6380:6379"  # Map host port 6380 to container port 6379
    command:
      - redis-server
      - "--cluster-enabled"
      - "yes"
      - "--cluster-config-file"
      - "/data/nodes.conf"
      - "--cluster-node-timeout"
      - "5000"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  redis-node3:
    image: redis:6.0
    container_name: redis-node3
    ports:
      - "6381:6379"  # Map host port 6381 to container port 6379
    command:
      - redis-server
      - "--cluster-enabled"
      - "yes"
      - "--cluster-config-file"
      - "/data/nodes.conf"
      - "--cluster-node-timeout"
      - "5000"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Prometheus Setup
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Prometheus web interface
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Mount configuration file
    networks:
      - app-network

  # Grafana Setup
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana web interface
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default admin password
    depends_on:
      - prometheus  # Ensure Prometheus starts before Grafana
    networks:
      - app-network

  # Producer Service Setup
  producer-app:
    image: ghcr.io/peterliu419/garmin_project/producer-app:latest
    container_name: producer-app
    ports:
      - "5001:5001"  # Producer app API
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3  # Ensure Redis nodes start first
    networks:
      - app-network
    environment:
      - FLASK_ENV=production  # Flask production environment

  producer-client:
    image: ghcr.io/peterliu419/garmin_project/producer-client:latest
    container_name: producer-client
    depends_on:
      - producer-app  # Ensure Producer app starts first
    networks:
      - app-network

  # Consumer Service Setup
  consumer-app:
    image: ghcr.io/peterliu419/garmin_project/consumer-app:latest
    container_name: consumer-app
    ports:
      - "5002:5002"  # Consumer app API
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
      - producer-app  # Ensure Redis nodes and Producer app start first
    networks:
      - app-network
    environment:
      - FLASK_ENV=production  # Flask production environment

  consumer-client:
    image: ghcr.io/peterliu419/garmin_project/consumer-client:latest    
    container_name: consumer-client
    depends_on:
      - consumer-app  # Ensure Consumer app starts first
    networks:
      - app-network

  # Redis Exporter for Prometheus
  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    environment:
      - REDIS_ADDR=redis-node1:6379  # Monitor Redis instance
    ports:
      - "9121:9121"  # Redis Exporter metrics port
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3  # Ensure Redis nodes start first
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # Default network driver

volumes:
  redis-data:
    # Named volume to persist Redis data